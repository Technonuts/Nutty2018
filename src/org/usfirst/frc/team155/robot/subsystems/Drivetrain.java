// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team155.robot.subsystems;

import org.usfirst.frc.team155.robot.Robot;
import org.usfirst.frc.team155.robot.RobotMap;
import org.usfirst.frc.team155.robot.commands.TankDrive;
import java.util.*;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
//import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
//import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

public class Drivetrain extends Subsystem {
	public static double multiplier;
	public static double range;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	public double rangeDistance;
	public double rangeScale = 1;
	// =======

	// >>>>>>> branch 'master' of https://github.com/Technonuts/Nutty2018.git
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	//private final AHRS gyro1 = RobotMap.drivetrainGyro1;
	private final AnalogGyro gyro1 = RobotMap.drivetrainGyro1;
	public final Encoder leftEncoder = RobotMap.drivetrainLeftEncoder;
	public final Encoder rightEncoder = RobotMap.drivetrainRightEncoder;
	private final DoubleSolenoid speedSolenoid = RobotMap.drivetrainSpeedSolenoid;
	private final Compressor compressor1 = RobotMap.drivetrainCompressor1;
	private final WPI_VictorSPX leftDrive1 = RobotMap.drivetrainLeftDrive1;
	private final WPI_VictorSPX leftDrive2 = RobotMap.drivetrainLeftDrive2;
	private final WPI_VictorSPX rightDrive1 = RobotMap.drivetrainRightDrive1;
	private final WPI_VictorSPX rightDrive2 = RobotMap.drivetrainRightDrive2;
	private final RobotDrive robotDrive4 = RobotMap.drivetrainRobotDrive4;

	private final AnalogInput rangeFinder = RobotMap.drivetrainRangeFinder;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private SpeedControllerGroup m_leftSide = new SpeedControllerGroup(leftDrive1, leftDrive2);
	private SpeedControllerGroup m_rightSide = new SpeedControllerGroup(rightDrive1, rightDrive2);
	Timer time = new Timer();
	public double autoTimer;
	// private DifferentialDrive m_drive;

	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		setDefaultCommand(new TankDrive());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void tankDrivejoy(Joystick left, Joystick right) {
		robotDrive4.tankDrive(left, right);
	}

	public void tankDrivejoyReverse(Joystick left, Joystick right) {
		robotDrive4.tankDrive(-left,- right);
	}
	public void tankDrivejoyGyro(double left, double right) {
		robotDrive4.tankDrive(left, right);
	}

	public void arcDrive(double speed, double turn) {
		// System.out.println("Herearc");
		robotDrive4.arcadeDrive(speed, turn);
		
	}

	public void stop() {
		robotDrive4.drive(0, 0);
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop

	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void highSpeed() {
		speedSolenoid.set(DoubleSolenoid.Value.kReverse);
		Robot.robotmap.speedMode = 1;
	}

	public void lowSpeed() {
		speedSolenoid.set(DoubleSolenoid.Value.kForward);
		Robot.robotmap.speedMode = 0;
	}

	public Encoder getLeftEncoder() {
		return leftEncoder;
	}

	/**
	 * The encoder getting the distance and speed of right side of the drivetrain.
	 */
	public Encoder getRightEncoder() {
		return rightEncoder;
	}

	/**
	 * The current angle of the drivetrain as measured by the Gyro.
	 */
	public double getGyro() {
		return gyro1.getAngle();
	}

	public void resetGyro() {
		gyro1.reset();
	}

	public double getGyroRate() {
		return gyro1.getRate();
	}

	public double getRangeFinder() {
		range = (rangeFinder.getVoltage() * multiplier);
		return range;
		// >>>>>>> branch 'master' of https://github.com/Technonuts/Nutty2018.git
	}

	public void resetEncoder() {
		leftEncoder.reset();
		rightEncoder.reset();
	}
	public void setBrakeMode() {
		leftDrive1.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Brake);
		leftDrive2.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Brake);
		rightDrive1.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Brake);
		rightDrive2.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Brake);
	}
	public void setCoastMode() {
		leftDrive1.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Coast);
		leftDrive2.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Coast);
		rightDrive1.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Coast);
		rightDrive2.setNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Coast);
	}

		
	}

	

