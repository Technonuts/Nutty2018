// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc155.subsystems;


import org.usfirst.frc155.RobotMap;
import org.usfirst.frc155.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends Subsystem {
	public static double multiplier;
	public static double range;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    public static final double STOW = 0;
    public static final double SWITCH = 20;
    public static final double LOWSCALE = 40;
    public static final double HIGHSCALE = 60;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro gyro1 = RobotMap.drivetrainGyro1;
    private final Encoder leftEncoder = RobotMap.drivetrainLeftEncoder;
    private final Encoder rightEncoder = RobotMap.drivetrainRightEncoder;
    private final DoubleSolenoid speedSolenoid = RobotMap.drivetrainSpeedSolenoid;
    private final Compressor compressor1 = RobotMap.drivetrainCompressor1;
    private final WPI_VictorSPX leftDrive1 = RobotMap.drivetrainLeftDrive1;
    private final WPI_VictorSPX leftDrive2 = RobotMap.drivetrainLeftDrive2;
    private final WPI_VictorSPX rightDrive1 = RobotMap.drivetrainRightDrive1;
    private final WPI_VictorSPX rightDrive2 = RobotMap.drivetrainRightDrive2;
    private final RobotDrive robotDrive4 = RobotMap.drivetrainRobotDrive4;
    private final AnalogInput rangeFinder = RobotMap.drivetrainRangeFinder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private SpeedControllerGroup m_leftSide = new SpeedControllerGroup(
    		leftDrive1, leftDrive2);
	private SpeedControllerGroup m_rightSide = new SpeedControllerGroup(
			rightDrive1, rightDrive2);
	private DifferentialDrive m_drive;
    

    
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TankDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void tankDrivejoy(Joystick left, Joystick right) {
    	robotDrive4.tankDrive(left,right);
    }
    
    public void arcDrive(double speed, double turn) {
    	robotDrive4.arcadeDrive(speed, turn);
    }
    
    public void stop() {
    	robotDrive4.drive(0, 0);
    }
    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void highSpeed() {
    	speedSolenoid.set(DoubleSolenoid.Value.kReverse);
    }
    
    public void lowSpeed() {
    	speedSolenoid.set(DoubleSolenoid.Value.kForward);
    }
    
    public Encoder getLeftEncoder() {
		return leftEncoder;
	}

	/**
	 * The encoder getting the distance and speed of right side of the
	 * drivetrain.
	 */
	public Encoder getRightEncoder() {
		return rightEncoder;
	}

	/**
	 * The current angle of the drivetrain as measured by the Gyro.
	 */
	public double getGyro() {
		return gyro1.getAngle();
	}
	
	public double getRangeFinder() {
		range = (rangeFinder.getVoltage() * multiplier);
		return range;
	}
}

