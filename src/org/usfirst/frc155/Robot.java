// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc155;

import org.usfirst.frc155.commands.AutoScale;
import org.usfirst.frc155.commands.AutoSwitch;
import org.usfirst.frc155.commands.DriveStraightDistance;
import org.usfirst.frc155.commands.GetCube;
import org.usfirst.frc155.commands.ToOtherSide;
import org.usfirst.frc155.commands.ToPosition;
import org.usfirst.frc155.commands.oppositeScale;
import org.usfirst.frc155.commands.oppositeSwitch;
import org.usfirst.frc155.subsystems.Claw;
import org.usfirst.frc155.subsystems.Drivetrain;
import org.usfirst.frc155.subsystems.Elevator;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

  //  Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
    Command autonomousCommand;
    SendableChooser autoChooser;
    SendableChooser positionChooser;
    public int position;
    private int switchValue;
    private int scaleValue;
    private int leftValue = 0;
    private int centerValue = 1;
    private int rightValue = 2;
    private int scaleMode = 0;
    private int switchMode = 1;
    private int megaMode = 2;
    private int twoMode = 3;
    private int mode;
    private int travelLength;
    
    
    

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drivetrain drivetrain;
    public static Claw claw;
    public static Elevator elevator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrain = new Drivetrain();
        SmartDashboard.putData(drivetrain);
        claw = new Claw();
        elevator = new Elevator();
        SmartDashboard.putData(elevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

       
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
       

        autoChooser = new SendableChooser();
        autoChooser.addDefault("Scale", scaleMode);
        autoChooser.addObject("Switch", switchMode);
        autoChooser.addObject("Mega Scale", megaMode);
        autoChooser.addObject("Two Box", twoMode);
        
        positionChooser = new SendableChooser();
        positionChooser.addDefault("Left", leftValue);
        positionChooser.addObject("Center", centerValue);
        positionChooser.addObject("Right", rightValue);
        positionChooser.addObject("Left Wall", 3);
        positionChooser.addObject("Right Wall", 4);
        SmartDashboard.putData("Position Chooser", positionChooser);
        
        
        
        SmartDashboard.putData("Auto mode", autoChooser);
        SmartDashboard.putData("Robot Position", positionChooser);
        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
//test
        //making another test
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

 
    @Override
    public void autonomousInit() {
    	char ourSwitch, scale, theirSwitch;
        autonomousCommand = chooser.getSelected();
        position = (int)positionChooser.getSelected();
        mode = (int)autoChooser.getSelected();
        if(position>=4) {
        	travelLength = 1;
        }
        else {
        	travelLength =0;
        }
        
        
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
        
        String gameData;
		gameData = DriverStation.getInstance().getGameSpecificMessage();
		if(gameData.charAt(0) == 'L')
		{
			ourSwitch = 'L';
			//Put left auto code here
			switchValue = leftValue;
			
			
			//Our switch left
		} else {
			//Put right auto code here
			//Our switch right
			ourSwitch = 'R';
			switchValue = rightValue;
		}

		if(gameData.charAt(1) == 'L')
		{
			//Put left auto code here
			//Our scale left
			scale = 'L';
			scaleValue = leftValue;
			
		} else {
			//Put right auto code here
			//Our scale right
			scale = 'R';
			scaleValue = rightValue;
			
		}
		/*	
		if(gameData.charAt(2) == 'L')
		{
			//Put left auto code here
			//Other team switch left
			theirSwitch = 'L';
		} else {
			//Put right auto code here
			//Other team switch right
			theirSwitch = 'R';
		} */
		
		if (mode == scaleMode) {
			//this is scale code
			if(scaleValue==position) {
				//run scale command
				new ToPosition();
				new AutoScale( travelLength,position); 
			}
			else if(switchValue ==position) {
				//run switch command
				new ToPosition();
				new AutoSwitch( position);
			}
			else {
				//cross line 
				new DriveStraightDistance(5,0.5);
			}
			
		}
		else if (mode == switchMode) {
			//this is switch only code
			if(switchValue==position) {
				//run switch command
				new ToPosition();
				new AutoSwitch (position);
			}
			else {
				//run other switch command
				new ToPosition();
			     new ToOtherSide(position, travelLength);
			     
				 
			//	new oppositeSwitch(travelLength, position);
			}
			
		}
		else if (mode == megaMode) {
			//this is to try and get the sca'e on the opposite position if it's not on our side
			if(scaleValue==position) {
				//run scale command
				new AutoScale( travelLength,position); 
			}
			else {
				//go to other side of scale
				new oppositeScale(travelLength, position);
				
			}
		}
		else if (mode == twoMode) {
			//this is when you are trying to place two boxes
			if(scaleValue==position) {
				//run scale command
				new AutoScale( travelLength,position); 
				//run get new cube
				//run switch command 
			}
			else if(scaleValue==position) {
				//run switch command 
				new AutoScale( travelLength,position); 
				//get new cube
				//new GetCube(position);
				
				
				//run switch command
			}
			else {
				//go to other switch
				//test
			}
		}
		else {
			//do nothing
		}
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
