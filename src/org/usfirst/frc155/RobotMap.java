// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc155;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 * 
 * 
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogGyro drivetrainGyro1;
    public static Encoder drivetrainLeftEncoder;
    public static Encoder drivetrainRightEncoder;
    public static DoubleSolenoid drivetrainSpeedSolenoid;
    public static Compressor drivetrainCompressor1;
    public static WPI_VictorSPX drivetrainLeftDrive1;
    public static WPI_VictorSPX drivetrainLeftDrive2;
    public static WPI_VictorSPX drivetrainRightDrive1;
    public static WPI_VictorSPX drivetrainRightDrive2;
    public static RobotDrive drivetrainRobotDrive4;
    public static AnalogInput clawCubeSensor;
    public static DoubleSolenoid clawGripper;
    public static WPI_VictorSPX clawElbow;
    public static DoubleSolenoid clawWrist;
    public static AnalogPotentiometer elevatorLiftPot;
    public static AnalogPotentiometer wristPot;

    public static WPI_VictorSPX elevatorLift; 
    public static AnalogInput robotRangeFinder;

  //  public static WPI_VictorSPX elevatorLift;
    public static AnalogInput drivetrainRangeFinder;
    public static Spark clawLeftMotor;
    public static Spark clawRightMotor;
    public static AnalogInput clawElbowPosition;
    public static DigitalInput leftBoxSwitch;
    public static DigitalInput rightBoxSwitch;
//>>>>>>> branch 'master' of https://github.com/Technonuts/Nutty2018.git

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
       drivetrainRangeFinder =  new AnalogInput(2);
        LiveWindow.addSensor("Drivetrain", "Range Finder", drivetrainRangeFinder);
       
    	
    	drivetrainGyro1 = new AnalogGyro(0);
        LiveWindow.addSensor("Drivetrain", "Gyro 1", drivetrainGyro1);
        drivetrainGyro1.setSensitivity(0.007);
        
        drivetrainLeftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "Left Encoder", drivetrainLeftEncoder);
        drivetrainLeftEncoder.setDistancePerPulse(1.0);
        drivetrainLeftEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        
        drivetrainRightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "Right Encoder", drivetrainRightEncoder);
        drivetrainRightEncoder.setDistancePerPulse(1.0);
        drivetrainRightEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        
        drivetrainSpeedSolenoid = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Drivetrain", "Speed Solenoid", drivetrainSpeedSolenoid);
        robotRangeFinder = new AnalogInput(2);
        LiveWindow.addSensor("DriveTrain", "RobotFinder",robotRangeFinder);
        drivetrainCompressor1 = new Compressor(0);
        LiveWindow.addActuator("Drivetrain", "Compressor 1", drivetrainCompressor1);
        
        drivetrainLeftDrive1 = new WPI_VictorSPX(0);
        
        
        drivetrainLeftDrive2 = new WPI_VictorSPX(1);
        
        
        drivetrainRightDrive1 = new WPI_VictorSPX(2);
        
        
        drivetrainRightDrive2 = new WPI_VictorSPX(3);
        
         
        drivetrainRobotDrive4 = new RobotDrive(drivetrainLeftDrive1, drivetrainLeftDrive2,
              drivetrainRightDrive1, drivetrainRightDrive2);
        
        drivetrainRobotDrive4.setSafetyEnabled(true);
        drivetrainRobotDrive4.setExpiration(0.1);
        drivetrainRobotDrive4.setSensitivity(0.5);
        drivetrainRobotDrive4.setMaxOutput(1.0);

        clawCubeSensor = new AnalogInput(1);
        LiveWindow.addSensor("Claw", "Cube Sensor", clawCubeSensor);
        
        clawGripper = new DoubleSolenoid(0, 4, 5);
        LiveWindow.addActuator("Claw", "Gripper", clawGripper);
        
        clawWrist = new DoubleSolenoid(0, 6, 7);
        LiveWindow.addActuator("Claw", "Wrist", clawWrist);
        
        
        clawElbow = new WPI_VictorSPX(4);
        LiveWindow.addActuator("Claw", "Elbow", clawElbow);
        
        elevatorLiftPot = new AnalogPotentiometer(2, 1.0, 0.0);
        LiveWindow.addSensor("Elevator", "Lift Pot", elevatorLiftPot);
        
        elevatorLift = new WPI_VictorSPX(5);
        
        clawLeftMotor = new Spark(1);
        LiveWindow.addActuator("Claw", "Left Motor", clawLeftMotor);
        
        clawRightMotor = new Spark(2);
        LiveWindow.addActuator("Claw", "Right Motor", clawRightMotor);

        clawElbowPosition = new AnalogInput(2);
        LiveWindow.addSensor("Claw", "Claw Elbow Position", clawElbowPosition);
        
        leftBoxSwitch = new DigitalInput(1);
        LiveWindow.addSensor("Claw", "Left Box Switch", leftBoxSwitch);
        
        rightBoxSwitch = new DigitalInput(2);
        LiveWindow.addSensor("Claw", "Right Box Switch", rightBoxSwitch);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
